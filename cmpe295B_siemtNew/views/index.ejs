<!DOCTYPE html>
<html lang="en">
<head>
    
    <!-- start: Meta -->
    <meta charset="utf-8">
    <title>SMART INDUSTRAIL EQUIPMENT MAINTAINCE TOOL</title>
    <meta name="description" content="Index Dashboard">
    <meta name="author" content="CMPE295B SIEMT">
    <meta name="keyword" content="Dashboard, Bootstrap, Admin, Template, Theme, Responsive, Fluid, Retina">
    <!-- end: Meta -->
    
    <!-- start: Mobile Specific -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- end: Mobile Specific -->
    
    <!-- start: CSS -->
    <link id="bootstrap-style" href="/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/bootstrap-responsive.min.css" rel="stylesheet">
    <link id="base-style" href="/css/style.css" rel="stylesheet">
        <link id="base-style" href="/css/modalstyle.css" rel="stylesheet">

    <link id="base-style-responsive" href="/css/style-responsive.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800&subset=latin,cyrillic-ext,latin-ext' rel='stylesheet' type='text/css'>
    <!--<script type="text/javascript" src="http://code.jquery.com/jquery-1.7.1.min.js"></script>-->
    <!-- end: CSS -->
     <script src="/js/jquery-1.9.1.min.js"></script>
     <script src="/js/jquery-migrate-1.0.0.min.js"></script>
    <!--<script src='http://localhost:3000/socket.io/socket.io.js'></script>-->
    <script src='/socket.io/socket.io.js'></script>
    <script type="text/javascript" src="http://pubnub.github.io/eon/v/eon/0.0.9/eon.js"></script>
    <link type="text/css" rel="stylesheet" href="http://pubnub.github.io/eon/v/eon/0.0.9/eon.css" />

    
    <script>  
           <!-- var socket = io.connect('//localhost:3000');-->
           var socket=io();
            socket.on('objTemp', function(data) {
            	$('#status').html("Connected").attr('style','font-size: 30px');
                $('#objTemp').html(parseInt(data.objTemp));
                console.log("This is my places");
                $('#ambTemp').html(parseInt(data.ambTemp));
                $.ajax( { url: "https://api.mongolab.com/api/1/databases/cmpe295b_siemt/collections/temp?apiKey=rvu6pAb1B5s-xO1eQBgXKTWMzRQOHQ-0",
                data: JSON.stringify( { "SensorId" : data.sensorId,
                						"ObjectTemp":data.objTemp,
                                        "AmbientTemp":data.ambTemp,
                                        "timeStamp":new Date() } ),
                type: "POST",
                contentType: "application/json" } );
            });
            

              socket.on('humTemp', function(data) {
                $('#humidity').html(parseInt(data.humidity));
                $.ajax( { url: "https://api.mongolab.com/api/1/databases/cmpe295b_siemt/collections/humidity?apiKey=rvu6pAb1B5s-xO1eQBgXKTWMzRQOHQ-0",
                data: JSON.stringify( { "SensorId" : data.sensorId,
                						"Temperature":data.humTemp,
                                        "Humidity":data.humidity,
                                        "timeStamp":new Date()} ),
                type: "POST",
                contentType: "application/json" } );
            }); 
				// socket.on('Accelero', function(data) {                
				// $('#accerleroX').html(parseInt(data.acc));
    //             $('#accerleroY').html(parseInt(data.ler));
    //             $('#accerleroZ').html(parseInt(data.met));
    //             console.log(data.acc);
    //             $.ajax( { url: "https://api.mongolab.com/api/1/databases/cmpe295b_siemt/collections/Accelero?apiKey=rvu6pAb1B5s-xO1eQBgXKTWMzRQOHQ-0",
    //             data: JSON.stringify( { "SensorId" : data.sensorId,
    //             						"AcceleroX":data.acc,
    //                                     "AcceleroY":data.ler,
    //                                     "AcceleroZ":data.met,
    //                                     "timeStamp":new Date()} ),
    //             type: "POST",
    //             contentType: "application/json" } );
    //         }); 

    //              socket.on('Magneto', function(data) {
    //             $('#magX').html(parseInt(data.magX));
    //             $('#magY').html(parseInt(data.magY));
    //             $('#magZ').html(parseInt(data.magZ));
    //             console.log(data.magX);
    //             console.log(data.magY);
    //             console.log(data.magZ);
    //             console.log("I am here in Magenato");
    //             $.ajax( { url: "https://api.mongolab.com/api/1/databases/cmpe295b_siemt/collections/Magneto?apiKey=rvu6pAb1B5s-xO1eQBgXKTWMzRQOHQ-0",
    //             data: JSON.stringify( { "SensorId" : data.sensorId,
    //                                     "MagX":data.magX,
    //                                     "MagY":data.magY,
    //                                     "MagZ":data.magZ,
    //                                     "timeStamp":new Date()} ),
    //             type: "POST",
    //             contentType: "application/json" } );
    //         }); 

               socket.on('Pressure', function(data) {
                $('#pressure').html(parseInt(data.press));
                $.ajax( { url: "https://api.mongolab.com/api/1/databases/cmpe295b_siemt/collections/pressure?apiKey=rvu6pAb1B5s-xO1eQBgXKTWMzRQOHQ-0",
                data: JSON.stringify( {  "SensorId" : data.sensorId,
                						 "Pressure":data.press,
                                        "timeStamp":new Date() } ),
                type: "POST",
                contentType: "application/json" } );
            });         
        </script>
       <script>
       $(document).ready(function () {
        var yVal="";
        var value="";
        var humid="";
        var press="";
        socket.on('objTemp', function(data) {
                            yVal = data.objTemp;
                            value=data.ambTemp;
                            });
        socket.on('humTemp', function(data) {
            humid=data.humidity;
        });
        socket.on('Pressure', function(data) {
            press=data.press;
        });
        
        var gaugeOptions = {
        chart: {
            type: 'solidgauge'
        },
        title: null,
        pane: {
            center: ['50%', '85%'],
            size: '140%',
            startAngle: -90,
            endAngle: 90,
            background: {
                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || '#EEE',
                innerRadius: '60%',
                outerRadius: '100%',
                shape: 'arc'
            }
        },

        tooltip: {
            enabled: false
        },

        // the value axis
        yAxis: {
            stops: [
                [0.3, '#55BF3B'], // green
                [0.6, '#DDDF0D'], // yellow
                [0.9, '#DF5353'] // red
            ],
            lineWidth: 0,
            minorTickInterval: null,
            tickPixelInterval: 400,
            tickWidth: 0,
            title: {
                y: -70
            },
            labels: {
                y: 16
            }
        },

        plotOptions: {
            solidgauge: {
                dataLabels: {
                    y: 5,
                    borderWidth: 0,
                    useHTML: true
                }
            }
        }
    };

    // The speed gauge
    $('#container-speed').highcharts(Highcharts.merge(gaugeOptions, {
        yAxis: {
            min: 0,
            max: 1000,
            title: {
                text: 'ObjectTemp'
            }
        },

        credits: {
            enabled: false
        },

        series: [{
            name: 'ObjectTemp',
            data: [80],
            dataLabels: {
                format: '<div style="text-align:center"><span style="font-size:25px;color:' +
                    ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '">{y}</span><br/>' +
                       '<span style="font-size:12px;color:silver"></span></div>'
            },
            tooltip: {
                valueSuffix: ' deg/.c'
            }
        }]

    }));

    

    // Bring life to the dials
    setInterval(function () {
        // Speed
        var chart = $('#container-speed').highcharts(),
            point,
            newVal,
            inc;

        if (chart) {
            point = chart.series[0].points[0];
            inc = yVal;
            newVal = point.y + inc;

            if (newVal < 0 || newVal > 200) {
                newVal = point.y - inc;
            }

            point.update(parseInt(inc));
        }
       
    }, 2000);

    $('#container-humidity').highcharts(Highcharts.merge(gaugeOptions, {
        yAxis: {
            min: 0,
            max: 200,
            title: {
                text: 'humidity'
            }
        },

        credits: {
            enabled: false
        },

        series: [{
            name: 'humidity',
            data: [80],
            dataLabels: {
                format: '<div style="text-align:center"><span style="font-size:25px;color:' +
                    ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '">{y}</span><br/>' +
                       '<span style="font-size:12px;color:silver"></span></div>'
            },
            tooltip: {
                valueSuffix: ''
            }
        }]

    }));

    

    // Bring life to the dials
    setInterval(function () {
        // Speed
        var chart = $('#container-humidity').highcharts(),
            point,
            newVal,
            inc;

        if (chart) {
            point = chart.series[0].points[0];
            inc = humid;
            newVal = point.y + inc;

            if (newVal < 0 || newVal > 200) {
                newVal = point.y - inc;
            }

            point.update(parseInt(inc));
        }
       
    }, 2000);

    $('#container-pressure').highcharts(Highcharts.merge(gaugeOptions, {
        yAxis: {
            min: 0,
            max: 2000,
            title: {
                text: 'pressure'
            }
        },

        credits: {
            enabled: false
        },

        series: [{
            name: 'pressure',
            data: [80],
            dataLabels: {
                format: '<div style="text-align:center"><span style="font-size:25px;color:' +
                    ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '">{y}</span><br/>' +
                       '<span style="font-size:12px;color:silver"></span></div>'
            },
            tooltip: {
                valueSuffix: ''
            }
        }]

    }));

    

    // Bring life to the dials
    setInterval(function () {
        // Speed
        var chart = $('#container-pressure').highcharts(),
            point,
            newVal,
            inc;

        if (chart) {
            point = chart.series[0].points[0];
            inc = press;
            newVal = point.y + inc;

            if (newVal < 0 || newVal > 200) {
                newVal = point.y - inc;
            }

            point.update(parseInt(inc));
        }
       
    }, 2000);

});

       </script>   

                    <!-- Rule Engine on the Index page-->

                     <script type="text/javascript">
                    function ruleEngine() {
                            var objT=0;
                            var ambT=0;
                            var hum=0;
                            var pres=0;
                            var valmax_T=1000000;
                            var valmin_T=0;
                            var valmax_P=1000000;
                            var valmin_P=0;
                            var valmax_H=1000000;
                            var valmin_H=0;
                            var valmax_AT=1000000;
                            var valmin_AT=0;
                            <!--var socket = io.connect('//localhost:3000');-->
                            var socket=io();
                            $.ajax({
                              url: 'https://api.mongolab.com/api/1/databases/cmpe295b_siemt/collections/Rule?apiKey=rvu6pAb1B5s-xO1eQBgXKTWMzRQOHQ-0&q={"Status": "Active"}',
                              type: 'get',
                              dataType: 'json',
                              success: function (data) {
                              getdata=JSON.parse(JSON.stringify(data));
                              console.log("getdata"+getdata);
                                  for(var i=0;i<getdata.length;i++) {  
                                    if(getdata[i].Attribute=="Temperature"&&(getdata[i].Rule_Condition==">"||getdata[i].Rule_Condition==">=")){
                                        if(getdata[i].Condition_Value<valmax_T){
                                        valmax_T=getdata[i].Condition_Value;
                                    }
                                    }else if(getdata[i].Attribute=="Temperature"&&(getdata[i].Rule_Condition=="<"||getdata[i].Rule_Condition=="<=")){
                                        if(getdata[i].Condition_Value>valmin_T){
                                        valmin_T=getdata[i].Condition_Value;
                                    }

                                    }else if(getdata[i].Attribute=="Humidity"&&(getdata[i].Rule_Condition==">"||getdata[i].Rule_Condition==">=")){
                                        if(getdata[i].Condition_Value<valmax_H){
                                        valmax_H=getdata[i].Condition_Value;
                                    }
                                    }else if(getdata[i].Attribute=="Humidity"&&(getdata[i].Rule_Condition=="<"||getdata[i].Rule_Condition=="<=")){
                                        if(getdata[i].Condition_Value>valmin_H){
                                        valmin_H=getdata[i].Condition_Value;
                                    }

                                    } else if(getdata[i].Attribute=="Pressure"&&(getdata[i].Rule_Condition==">"||getdata[i].Rule_Condition==">=")){
                                        if(getdata[i].Condition_Value<valmax_P){
                                        valmax_P=getdata[i].Condition_Value;
                                    }
                                    }else if(getdata[i].Attribute=="Pressure"&&(getdata[i].Rule_Condition=="<"||getdata[i].Rule_Condition=="<=")){
                                        if(getdata[i].Condition_Value>valmin_P){
                                        valmin_P=getdata[i].Condition_Value;
                                    } 
                                    }else if(getdata[i].Attribute=="AmbientTemp"&&(getdata[i].Rule_Condition==">"||getdata[i].Rule_Condition==">=")){
                                        if(getdata[i].Condition_Value<valmax_AT){
                                        valmax_AT=getdata[i].Condition_Value;
                                    }
                                    }else if(getdata[i].Attribute=="AmbientTemp"&&(getdata[i].Rule_Condition=="<"||getdata[i].Rule_Condition=="<=")){
                                        if(getdata[i].Condition_Value>valmin_AT){
                                        valmin_AT=getdata[i].Condition_Value;
                                    }

                                    }

                              }
                              },
                              error: function (XMLHttpRequest, textStatus, errorThrown) {
                                console.log('error', errorThrown);
                              }
                            });
                               socket.on('objTemp', function(data) {
                                        objT=parseInt(data.objTemp);
                                        ambT=parseInt(data.ambTemp);

                                    });
                                    socket.on('humTemp', function(data) {
                                        hum=parseInt(data.humidity);
                                    });
                                    socket.on('Pressure', function(data) {
                                        pres=parseInt(data.press);
                                    }); 
                                    if(objT<valmax_T||objT>valmin_T||hum<valmax_H||hum>valmin_H||pres<valmax_P||pres>valmin_P||ambT<valmax_AT||ambT>valmin_AT){
                                           // alert("alert for rule");
                                        }
                                    setTimeout(ruleEngine, 5000);
                        }
                        ruleEngine();


                    </script>



</head>

<body>




        <!-- start: Header -->
    <div class="navbar">
        <div class="navbar-inner">
            <div class="container-fluid">
                <a class="btn btn-navbar" data-toggle="collapse" data-target=".top-nav.nav-collapse,.sidebar-nav.nav-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </a>
                <a class="brand" href=/><span>SIEMT</span></a>
                                
                <!-- start: Header Menu -->
                <div class="nav-no-collapse header-nav">
                    
                </div>
                <!-- end: Header Menu -->
                
            </div>
        </div>
    </div>
    <!-- start: Header -->
        
        <div class="container-fluid-full">
        <div class="row-fluid">
                
            <!-- start: Main Menu -->
            <div id="sidebar-left" class="span2">
                <div class="nav-collapse sidebar-nav">
                    <ul class="nav nav-tabs nav-stacked main-menu">
                        <li><a href="/"><i class="icon-bar-chart"></i><span class="hidden-tablet"> Dashboard</span></a></li>   
                        <!-- <li><a href="/chart"><i class="icon-list-alt"></i><span class="hidden-tablet"> Charts</span></a></li> -->
                        <li>
							<a class="dropmenu" href="#"><i class="icon-folder-close-alt"></i><span class="hidden-tablet"> Historic Analysis</span></a>
							<ul>
								<li><a class="submenu" href=/temperature><i class="icon-file-alt"></i><span class="hidden-tablet"> Temperature</span></a></li>
								<li><a class="submenu" href=/humidity><i class="icon-file-alt"></i><span class="hidden-tablet"> Humidity</span></a></li>
								<li><a class="submenu" href=/pressure><i class="icon-file-alt"></i><span class="hidden-tablet"> Pressure</span></a></li>
							</ul>	
						</li>
                        <li><a href="/reports"><i class="icon-align-justify"></i><span class="hidden-tablet"> Reports</span></a></li>
                        <li><a href="#openModal"><i class="icon-align-justify"></i><span class="hidden-tablet"> Rule Engine</span></a></li>
                    </ul>
                </div>
            </div>
            <!-- end: Main Menu -->
            
            <noscript>
                <div class="alert alert-block span10">
                    <h4 class="alert-heading">Warning!</h4>
                    <p>You need to have <a href="http://en.wikipedia.org/wiki/JavaScript" target="_blank">JavaScript</a> enabled to use this site.</p>
                </div>
            </noscript>
            
            <!-- start: Content -->
            <div id="content" class="span10">
            
            
            <ul class="breadcrumb">
                <li>
                    <i class="icon-home"></i>
                    <a href="/">Home</a> 
                    <i class="icon-angle-right"></i>
                </li>
                <li><a href="/">Dashboard</a></li>
            </ul>

            <div class="row-fluid">
   
                <div class="span3 statbox purple" onTablet="span6" onDesktop="span3">
                    <div class="boxchart">5,6,7,2,0,4,2,4,8,2,3,3,2</div>
                    <div class="number" id="objTemp"><i class="icon-arrow-up"></i></div>
                    <div class="title">Temperature Analysis</div>
                    <div class="footer">
                        <a href="/temperature"> Click Here</a>
                    </div>  
                </div>
                <div class="span3 statbox green" onTablet="span6" onDesktop="span3">
                    <div class="boxchart">1,2,6,4,0,8,2,4,5,3,1,7,5</div>
                    <div class="number" id="pressure"><i class="icon-arrow-up"></i></div>
                    <div class="title">Pressure Analysis</div>
                    <div class="footer">
                        <a href="/pressure"> Click Here</a>
                    </div>
                </div>
                <div class="span3 statbox blue noMargin" onTablet="span6" onDesktop="span3">
                    <div class="boxchart">5,6,7,2,0,-4,-2,4,8,2,3,3,2</div>
                    <div class="number" id="humidity"><i class="icon-arrow-down"></i></div>
                    <div class="title">Humidity Analysis</div>
                    <div class="footer">
                        <a href="/humidity"> Click Here</a>
                    </div>
                </div>
                <div class="span3 statbox red" onTablet="span6" onDesktop="span3">
                    <div class="boxchart">7,2,4,6,10,5,6,9</div>
                   <!-- <div class="number" id="status" style="font-size:10px"><i class="icon-arrow-down"></i></div> -->
                    <div class="number" id="status">
                </div>  
                
            </div>      

            <div class="row-fluid">
                
                <div class="span12" onTablet="span7" onDesktop="span12">
                    
                    <div id="chart"  style="height:400px" ></div>
                    <script>
                        var pubnub = PUBNUB.init({
                         publish_key: 'demo',
                            subscribe_key: 'demo'
                        });
                        var channel = "c3-spline" + Math.random();
                        eon.chart({
                        channel: channel,
                        history: true,
                            flow: true,
                            pubnub: pubnub,
                             generate: {
                            bindto: '#chart',
                             data: {
                                labels: false
                                    }
                                     }
                                    });
                        </script>

                        <script>
                         <!--var socket = io.connect('//localhost:3000');-->
                         var socket=io();
                            var objTemp="";
                            var ambTemp="";
                            var humid="";
                            var press="";
                            socket.on('objTemp', function(data) {
                            objTemp=data.objTemp;
                            ambTemp=data.ambTemp;
                            });
                            socket.on('humTemp', function(data) {
                            humid=data.humidity;
                            });
                            socket.on('Pressure', function(data) {
                            press=data.press;
                            });
                        setInterval(function(){

                          pubnub.publish({
                            channel: channel,
                            message: {
                              eon: {
                                'Temperature': parseInt(objTemp),
                                'Pressure': parseInt(press),
                                'AmbTemp': parseInt(ambTemp),
                                'Humidity': parseInt(humid)
                              }
                            }
                          });

                        }, 1000);
                        </script>
                                            
                </div>             
            </div>

			<br>
			<br>
                 <div class="row-fluid hideInIE8 circleStats">
                
                <div class="span4" onTablet="span8" onDesktop="span4">
                    <div class="circleStatsItemBox orangeDark">
                        <div class="header">Object Temperature</div>
                        <div  id="container-speed"  style="width: 300px; height: 200px">
                          
                        </div>  
                    </div>
                </div>

                <div class="span4" onTablet="span8" onDesktop="span4">
                    <div class="circleStatsItemBox pink">
                        <div class="header">Humidity</div>
                        <div id="container-humidity" style="width: 300px; height: 200px"> 
                        </div>   
                    </div>
                </div>

                <div class="span4" onTablet="span8" onDesktop="span4">
                    <div class="circleStatsItemBox black">
                        <div class="header">Pressure</div>
                        <div id="container-pressure" style="width: 300px; height: 200px">
                        </div>
                    </div>
                </div>
                        
            </div> 

			<br>
			<br>
                <div class="row-fluid">
                
                <div class="span6" onTablet="span7" onDesktop="span6">
                    <div id="chart1"  style="height:282px" ></div>
                    <script>
                              var pubnubNew = PUBNUB.init({
                                publish_key: 'demo',
                                subscribe_key: 'demo'
                              });
                              var channelNew = "c3-spline" + Math.random();
                              eon.chart({
                                pubnub: pubnubNew,
                                channel: channelNew,
                                history: true,
                                debug: true,
                                generate: {
                                  bindto: '#chart1',
                                  data: {
                                    labels: true,
                                    type: 'bar'
                                  },
                                  bar: {
                                    width: {
                                      ratio: 0.5
                                    }
                                  }
                                }
                              });
                            </script>

                        <script>
                        <!-- var socket = io.connect('//localhost:3000');-->
                        var socket=io();
                            var accx="";
                            var accy="";
                            var accz="";
                            
                            socket.on('Accelero', function(data) {
                            accx=data.acc;
                            accy=data.ler;
                            accz=data.met;

                            });
                            
                        setInterval(function(){

                          pubnub.publish({
                            channel: channelNew,
                            message: {
                              eon: {
                                'AcceleroX': parseInt(accx),
                                'AcceleroY': parseInt(accy),
                                'AcceleroZ': parseInt(accz),
                                
                              }
                            }
                          });

                        }, 700);
                        </script>
                    
                </div> 
            
                
                <div class="span6" onTablet="span7" onDesktop="span6">
                    <div id="chart2"  style="height:282px" ></div>
                    <script>
                              var pubnubNew1 = PUBNUB.init({
                                publish_key: 'demo',
                                subscribe_key: 'demo'
                              });
                              var channelNew1 = "c3-spline" + Math.random();
                              eon.chart({
                                pubnub: pubnubNew1,
                                channel: channelNew1,
                                history: true,
                                debug: true,
                                generate: {
                                  bindto: '#chart2',
                                  data: {
                                    labels: true,
                                    type: 'bar'
                                  },
                                  bar: {
                                    width: {
                                      ratio: 0.5
                                    }
                                  }
                                }
                              });
                            </script>

                        <script>
                        <!-- var socket = io.connect('//localhost:3000');-->
                        var socket=io();
                            var magx="";
                            var magy="";
                            var magz="";
                            
                            socket.on('Magneto', function(data) {
                            magx=data.magX;
                            magy=data.magY;
                            magz=data.magZ;

                            });
                            
                        setInterval(function(){

                          pubnub.publish({
                            channel: channelNew1,
                            message: {
                              eon: {
                                'MagX': parseInt(magx),
                                'MagY': parseInt(magy),
                                'MagZ': parseInt(magz),
                                
                              }
                            }
                          });

                        }, 700);
                        </script>
                    
                </div> 
            </div> 

            
                
    </div><!--/.fluid-container-->
    
            <!-- end: Content -->
        </div><!--/#content.span10-->
        </div><!--/fluid-row-->
        
    <div class="modal hide fade" id="myModal">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">×</button>
            <h3>Settings</h3>
        </div>
        <div class="modal-body">
            <p>Here settings can be configured...</p>
        </div>
        <div class="modal-footer">
            <a href="#" class="btn" data-dismiss="modal">Close</a>
            <a href="#" class="btn btn-primary">Save changes</a>
        </div>
    </div>
    
    <div class="clearfix"></div>
    
    <footer>

        <p>
              
        </p>
	<div id="google_translate_element"></div>
	<script type="text/javascript">
	function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
}
	</script>
	<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
    </footer>
    
    <!-- start: JavaScript-->

       
    	
        <script src="/js/jquery-ui-1.10.0.custom.min.js"></script>
    
        <script src="/js/jquery.ui.touch-punch.js"></script>
    
        <script src="/js/modernizr.js"></script>
    
        <script src="/js/bootstrap.min.js"></script>
    
        <script src="/js/jquery.cookie.js"></script>
    
        <script src='/js/fullcalendar.min.js'></script>
    
        <script src='/js/jquery.dataTables.min.js'></script>

        <script src="/js/excanvas.js"></script>
    <script src="/js/jquery.flot.js"></script>
    <script src="/js/jquery.flot.pie.js"></script>
    <script src="/js/jquery.flot.stack.js"></script>
    <script src="/js/jquery.flot.resize.min.js"></script>
    
        <script src="/js/jquery.chosen.min.js"></script>
    
        <script src="/js/jquery.uniform.min.js"></script>
        
        <script src="/js/jquery.cleditor.min.js"></script>
    
        <script src="/js/jquery.noty.js"></script>
    
        <script src="/js/jquery.elfinder.min.js"></script>
    
        <script src="/js/jquery.raty.min.js"></script>
    
        <script src="/js/jquery.iphone.toggle.js"></script>
    
        <script src="/js/jquery.uploadify-3.1.min.js"></script>
    
        <script src="/js/jquery.gritter.min.js"></script>
    
        <script src="/js/jquery.imagesloaded.js"></script>
    
        <script src="/js/jquery.masonry.min.js"></script>
    
        <script src="/js/jquery.knob.modified.js"></script>
    
        <script src="/js/jquery.sparkline.min.js"></script>
    
        <script src="/js/counter.js"></script>
    
        <script src="/js/retina.js"></script>

        <script src="/js/custom.js"></script>
        <script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>

<script src="https://code.highcharts.com/modules/solid-gauge.js"></script>
        
    <!-- end: JavaScript-->
                 <div id="openModal" class="modalDialog">
    <div>   <a href="/" title="Close" class="close">X</a>
                    <h4 class="modal-title">Please Login </h4>

        <form id="loginform" name="loginform" method="post" action="/authenticate">
     <label for="username">Username:</label>
      <input type="text" name="username" id="username" class="txtfield" tabindex="1">
      
      <label for="password">Password:</label>
      <input type="password" name="password" id="password" class="txtfield" tabindex="2">
      
      <div class="center"><input type="submit" name="loginbtn" id="loginbtn" class="flatbtn-blu hidemodal" value="Log In" tabindex="3"></div>
    </form>

           
    </div>
</body>
</html>
